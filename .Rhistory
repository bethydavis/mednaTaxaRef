colA <- c("A", "A", "A", "B", "C", "C", "D", "E")
colB <- c(1, 2, 3, 1, 1, 2, 1, 1)
foo = data.frame(location = c("here", "there", "here", "there", "where"), x = 1:5, y = 6:10)
foo
bar <- subset(foo, location == "there")
foo[foo$location == "there", ]
foo = data.frame(location = c("salmon", "trout", "cod", "trout", "lamprey"), x = 1:5)
bar <- subset(foo, location == "trout")
foo[foo$location == "trout", ]
foo = data.frame(location = c("salmon", "trout", "cod", "trout", "lamprey"), x = 1:5, y = c("A", "B", "C", "D", "E"))
bar <- subset(foo, location == "trout")
foo[foo$location == "trout", ]
foo[foo$y = "D", ]
foo[foo$y == "D", ]
location = c("salmon", "trout", "cod", "trout", "lamprey")
x = 1:5
y = c("A", "B", "C", "D", "E")
foo1 <- data.frame(location, x, y)
foo1
location = c("salmon", "trout", "cod", "trout", "lamprey")
x = 1:5
y = c("A", "B", "C", "D", "E")
foo1 <- data.frame(location, x, y)
find = "cod"
foo1[foo1$location = find]
location = c("salmon", "trout", "cod", "trout", "lamprey")
x = 1:5
y = c("A", "B", "C", "D", "E")
foo1 <- data.frame(location, x, y)
find = "cod"
foo1[foo1$location = find, ]
location = c("salmon", "trout", "cod", "trout", "lamprey")
x = 1:5
y = c("A", "B", "C", "D", "E")
foo1 <- data.frame(location, x, y)
find = "cod"
foo1[foo1$location == find, ]
listbase <- read.csv("C:/Users/Desktop/SpeciesListMeta.csv")
listbase <- read.csv("C:/Users/bydav/Desktop/SpeciesListMeta.csv")
listbase <- read.csv("C:/Users/bydav/Desktop/SpeciesListMeta.csv", header = TRUE)
View(listbase)
eukaryalist <- subset(listbase, !(Source %in% c(2,3,16)))
eukaryalist[eukaryalist$Source == 16, ]
letters_only <- function(x) !grepl("[^A-Za-z]", x)
letters_only(eukaryalist$Species_Name)
letters_only <- function(x) !grepl("[^A-Za-z]", x)
letterresult <- letters_only(eukaryalist$Species_Name)
print(letterresult[TRUE])
sum(letterresult, na.rm = TRUE)
fullbase <- read.csv("C:/Users/bydav/Desktop/July2023_SpeciesList.csv", header = TRUE)
eukaryalist[eukaryalist$Species_Name == "Salmo salar", ]
df <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df) <- c('SpeciesBinomial', 'SourceList')
df
df[nrow(df) + 1,] = c(testval, 1:4)
df[nrow(df) + 1,] = c("testval", 1:4)
x = Xx
x = "Xx"
y = list(1:4)
df[nrow(df) + 1,] = c(x, y)
x = c("Xx")
y = list(c(1:4)
df[nrow(df) + 1,] = c(x, y)
x = c("Xx")
y = list(c(1:4))
df[nrow(df) + 1,] = c(x, y)
df[nrow(df) + 1,] = c(x, cbind(y))
x = c("Xx")
y = list(c(1:4))
df[cbind(df) + 1,] = c(x, y)
myDF <- data.frame("cars"=rep(cars, times=lapply(price, length)), "price"=unlist(price, use.names=FALSE))
cars <- c("FORD", "GM")
price  <- list( c(1000, 2000, 3000),  c(2000, 500, 1000))
myDF <- data.frame(cars=cars, price=cbind(price))
myDF
df <- data.frame(SpeciesBinomial = c("Salmo salar"))
df$SourceList <- list(list(eukaryalist$Species_Name == "Salmo salar")$Source)
df
df$SourceList <- list(c(1,5,13))
df
eukaryalist[eukaryalist$Species_Name == "Salmo salar", ]
x <- eukaryalist[eukaryalist$Species_Name == "Syringa vulgaris", ]
x$Species_Name
x$Source
df[nrow(df) + 1,] = c(x$Species_Name, x$Source)
df
y <- eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
y
df[nrow(df) + 1,] = c(y$Species_Name, y$Source)
df[nrow(df) + 1,] = c(y$Species_Name, list(c(y$Source)))
y$Source
df[nrow(df) + 1,] = c(y$Species_Name, y$Source)
ysource <- list(y$Source)
df[nrow(df) + 1,] = c(y$Species_Name, ysource)
df[nrow(df) + 1,] = c(y$Species_Name, list(y$Source))
df[nrow(df) + 1,] = c(y$Species_Name, list(c(y$Source)))
ysource <- list(y$Source)
ysource
df[nrow(df) + 1,] = c(y$Species_Name, ysource)
df
ysource <- list(y$Source)
ysource
df
eukaryalist[eukaryalist$Species_Name == "Salmo salar", ]
df <- data.frame(SpeciesBinomial = c("Salmo salar"))
df$SourceList <- list(c(1,5,13))
df
x <- eukaryalist[eukaryalist$Species_Name == "Syringa vulgaris", ]
x$Species_Name
x$Source
df[nrow(df) + 1,] = c(x$Species_Name, x$Source)
df
y <- eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
ysource <- list(c(y$Source))
ysource
df[nrow(df) + 1,] = c(y$Species_Name, ysource)
df[nrow(df) + 1,] = c(y$Species_Name, c(ysource))
df[nrow(df) + 1,] = c(y$Species_Name, SourceList=ysource)
df
df[nrow]$SourceList <- ysource
df[nrow]$SourceList
df[nrow]
df[1]
df(nrow(df))$SourceList
eukaryalist[eukaryalist$Species_Name == "Salmo salar", ]
df <- data.frame(SpeciesBinomial = c("Salmo salar"))
df$SourceList <- list(c(1,5,13))
df
x <- eukaryalist[eukaryalist$Species_Name == "Syringa vulgaris", ]
x$Species_Name
x$Source
df[nrow(df) + 1,] = c(x$Species_Name, x$Source)
df
y <- eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
ysource <- list(c(y$Source))
ysource
df[nrow(df) + 1,] = c(y$Species_Name, NULL)
df
df(nrow(df))$SourceList
df[nrow(df)]$SourceList
df[nrow(df)]$SourceList <- ysource
df[nrow(df) + 1,] = c(y$Species_Name, 0)
df
eukaryalist[eukaryalist$Species_Name == "Salmo salar", ]
df <- data.frame(SpeciesBinomial = c("Salmo salar"))
df$SourceList <- list(c(1,5,13))
df
x <- eukaryalist[eukaryalist$Species_Name == "Syringa vulgaris", ]
x$Species_Name
x$Source
df[nrow(df) + 1,] = c(x$Species_Name, x$Source)
df
y <- eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
ysource <- list(c(y$Source))
ysource
df[nrow(df) + 1,] = c(y$Species_Name, 0)
y$Species_Name
y <- eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
y$Species_Name
eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
unique(y$Species_Name)
df[nrow(df) + 1,] = c(unique(y$Species_Name), 0)
df
eukaryalist[eukaryalist$Species_Name == "Salmo salar", ]
df <- data.frame(SpeciesBinomial = c("Salmo salar"))
df$SourceList <- list(c(1,5,13))
df
x <- eukaryalist[eukaryalist$Species_Name == "Syringa vulgaris", ]
x$Species_Name
x$Source
df[nrow(df) + 1,] = c(x$Species_Name, x$Source)
df
y <- eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
unique(y$Species_Name)
df[nrow(df) + 1,] = c(unique(y$Species_Name), 0)
df
df[nrow(df)]$SourceList <- ysource
df[nrow(df) + 1,] = c(unique(y$Species_Name), y$Source)
df[nrow(df) + 1,] = c(unique(y$Species_Name), list(c(y$Source)))
ysource <- list(c(y$Source))
ysource
df[nrow(df) + 1,] = c(unique(y$Species_Name), ysource)
class(SourceList)
class(df$SourceList)
df[nrow(df)]$SourceList
df[nrow(df), ]$SourceList
df
df[nrow(df), ]$SourceList <- ysource
df
eukaryalist[eukaryalist$Species_Name == "Salmo salar", ]
# Attach search result to a new dataframe
df <- data.frame(SpeciesBinomial = c("Salmo salar"))
# Manually attach the source values to the dataframe
df$SourceList <- list(c(1,5,13))
# Check dataframe
df
# Take one step back and now try another species, without the manual additions
# Assign search result to a variable
x <- eukaryalist[eukaryalist$Species_Name == "Syringa vulgaris", ]
# Check that variable components can be called
x$Species_Name
x$Source
# Append results to the dataframe
df[nrow(df) + 1,] = c(x$Species_Name, x$Source)
# Check dataframe
df
# Test again with a species that should have at least 2 sources
y <- eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
# Assign source values to a list
ysource <- list(c(y$Source))
# Check list
ysource
# Append search results, specifying only one instance of the name is needed, to the dataframe
df[nrow(df) + 1,] = c(unique(y$Species_Name), ysource)
# Append search results, specifying only one instance of the name is needed, to the dataframe. Keep the source as 0 so it can be filled in later. Adding directly does not work
df[nrow(df) + 1,] = c(unique(y$Species_Name), 0)
df
# Initial query on a species I know has more than one source to test the search function
eukaryalist[eukaryalist$Species_Name == "Salmo salar", ]
# Attach search result to a new dataframe
df <- data.frame(SpeciesBinomial = c("Salmo salar"))
# Manually attach the source values to the dataframe
df$SourceList <- list(c(1,5,13))
# Check dataframe
df
# Take one step back and now try another species, without the manual additions
# Assign search result to a variable
x <- eukaryalist[eukaryalist$Species_Name == "Syringa vulgaris", ]
# Check that variable components can be called
x$Species_Name
x$Source
# Append results to the dataframe
df[nrow(df) + 1,] = c(x$Species_Name, x$Source)
# Check dataframe
df
# Test again with a species that should have at least 2 sources
y <- eukaryalist[eukaryalist$Species_Name == "Petromyzon marinus", ]
# Assign source values to a list
ysource <- list(c(y$Source))
# Append search results, specifying only one instance of the name is needed, to the dataframe. Keep the source as 0 so it can be filled in later. Adding directly does not work
df[nrow(df) + 1,] = c(unique(y$Species_Name), 0)
# Check dataframe
df
# Attach the source list to the latest row
df[nrow(df), ]$SourceList <- ysource
# Check results
df
names <- list(c(eukaryalist$Species_Name))
head(names)
names <- unique(list(c(eukaryalist$Species_Name)))
head(names)
names[names$Species_Name == "Salmo salar", ]
names == "Salmo salar"
sort(names)
View(names)
dim(names)
dim(eukaryalist)
filter <- unique(eukaryalist$Species_Name
dim(filter)
filter <- unique(eukaryalist$Species_Name)
dim(filter)
head(filter)
names <- list(c(filter))
head(names)
testsubset <- names[[1:100]]
testsubset <- names[1:100]
head(testsubset)
View(testsubset)
testsubset <- names[[1]]
df
# Create a list of unique names
filter <- unique(eukaryalist$Species_Name)
names <- list(c(filter))
for (i in names) {
tempsearch <- eukaryalist[eukaryalist$Species_Name == i, ]
tempsource <- list(c(tempsearch$Source))
df[nrow(df) + 1,] = c(unique(tempsearch$Species_Name), 0)
df[nrow(df), ]$SourceList <- tempsource
}
# Create a list of unique names
filter <- unique(eukaryalist$Species_Name)
names <- list(c(filter))
for (i in filter) {
tempsearch <- eukaryalist[eukaryalist$Species_Name == i, ]
tempsource <- list(c(tempsearch$Source))
df[nrow(df) + 1,] = c(unique(tempsearch$Species_Name), 0)
df[nrow(df), ]$SourceList <- tempsource
}
df
head(df)
View(df)
df[df$SpeciesBinomial == "Salmo salar", ]
# Create a list of unique names
filter <- unique(eukaryalist$Species_Name)
# prep a new dataframe
metadf <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(metadf) <- c('SpeciesBinomial', 'Source')
for (i in filter) {
tempsearch <- eukaryalist[eukaryalist$Species_Name == i, ]
tempsource <- list(c(tempsearch$Source))
metadf[nrow(metadf) + 1,] = c(unique(tempsearch$Species_Name), 0)
metadf[nrow(metadf), ]$SourceList <- tempsource
}
View(metadf)
metadf <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(metadf) <- c('SpeciesBinomial', 'Source')
metadf
# Create a list of unique names
filter <- unique(eukaryalist$Species_Name)
# prep a new dataframe
metadf <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(metadf) <- c('SpeciesBinomial', 'Source')
metadf
for (i in filter) {
tempsearch <- eukaryalist[eukaryalist$Species_Name == i, ]
tempsource <- list(c(tempsearch$Source))
metadf[nrow(metadf) + 1,] = c(unique(tempsearch$Species_Name), 0)
metadf[nrow(metadf), ]$SourceList <- tempsource
}
View(metadf)
View(df)
View(metadf)
View(tempsource)
View(tempsearch)
warnings()
tempsearch <- eukaryalist[eukaryalist$Species_Name == i, ]
tempsource <- list(c(tempsearch$Source))
metadf[nrow(metadf) + 1,] = c(unique(tempsearch$Species_Name), 0)
tail(metadf)
metadf[nrow(metadf), ]$SourceList <- tempsource
tempsource
# Create a list of unique names
filter <- unique(eukaryalist$Species_Name)
# prep a new dataframe
metadf <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(metadf) <- c('SpeciesBinomial', 'SourceList')
metadf
for (i in filter) {
tempsearch <- eukaryalist[eukaryalist$Species_Name == i, ]
tempsource <- list(c(tempsearch$Source))
metadf[nrow(metadf) + 1,] = c(unique(tempsearch$Species_Name), 0)
metadf[nrow(metadf), ]$SourceList <- tempsource
}
View(metadf)
# Test a search query
metadf[metadf$SpeciesBinomial == "Salmo salar", ]
library(beepr)
listbase <- read.csv("C:/Users/bydav/Desktop/SpeciesListMeta.csv", header = TRUE)
eukaryalist <- subset(listbase, !(Source %in% c(2,3,16)))
# Create a list of unique names
filter <- unique(eukaryalist$Species_Name)
# prep a new dataframe
metadf <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(metadf) <- c('SpeciesBinomial', 'SourceList')
metadf
for (i in filter) {
tempsearch <- eukaryalist[eukaryalist$Species_Name == i, ]
tempsource <- list(c(tempsearch$Source))
metadf[nrow(metadf) + 1,] = c(unique(tempsearch$Species_Name), 0)
metadf[nrow(metadf), ]$SourceList <- tempsource
}
beep(sound = "wilhelm")
View(metadf)
library(dplyr)
df %>%
mutate(newCol = 100)
df <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df) <- c('SpeciesBinomial', 'SourceList')
df %>%
mutate(newCol = 100)
df <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df) <- c('SpeciesBinomial', 'SourceList')
df <- data.frame(SpeciesBinomial = c("Salmo salar"))
df %>%
mutate(SourceList = 100)
GBIF <- read.table('C:/Users/bydav/Desktop/GBIFNovSimple.csv', sep = '\t', fill = TRUE, header = TRUE)
GBIF <- read.table('C:/Users/bydav/Desktop/GBIFNovSpeciesList.csv', sep = '\t', fill = TRUE, header = TRUE)
# Check that I can pull out just the taxonomic ranks
head(GBIF[, 10])
head(GBIF)
GBIFspecies <- unique(GBIF[, 10])
beep(sound = "wilhelm")
head(GBIFspecies)
GBIFResults <- as.data.frame(GBIFspecies)
beep(sound = "wilhelm")
colnames(GBIFResults) <- c("Species_Name")
head(GBIFResults)
head(eukaryalist)
GBIFResults %>%
mutate(SourceList = 29)
beep(sound = "wilhelm")
updatedeukarya(rbind(GBIFResults, eukaryalist))
updatedeukarya <- (rbind(GBIFResults, eukaryalist))
head(GBIFResults)
head(eukaryalist)
GBIFdf <- GBIFResults %>%
mutate(SourceList = 29)
beep(sound = "wilhelm")
head(GBIFdf)
head(eukaryalist)
updatedeukarya <- (rbind(GBIFdf, eukaryalist))
GBIFdf <- GBIFResults %>%
mutate(Source = 29)
beep(sound = "wilhelm")
updatedeukarya <- (rbind(GBIFdf, eukaryalist))
beep(sound = "wilhelm")
# Create a list of unique names
filter <- unique(updatedeukarya$Species_Name)
# Create a list of unique names
filter2 <- unique(updatedeukarya$Species_Name)
# Create a list of unique names
filter2 <- unique(updatedeukarya$Species_Name)
# prep a new dataframe
metadf2 <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(metadf2) <- c('SpeciesBinomial', 'SourceList')
metadf2
for (i in filter) {
tempsearch <- updatedeukarya[updatedeukarya$Species_Name == i, ]
tempsource <- list(c(tempsearch$Source))
metadf2[nrow(metadf2) + 1,] = c(unique(tempsearch$Species_Name), 0)
metadf2[nrow(metadf2), ]$SourceList <- tempsource
}
beep(sound = "wilhelm")
head(metadf2)
sort(metadf2)
letters_only <- function(x) !grepl("[^A-Za-z]", x)
letterresult <- letters_only(metadf2$SpeciesBinomial)
sum(letterresult, na.rm = TRUE)
which(letterresult)
View(metadf2)
metadf2[26660]
letterresult[26642]
metadf2[26642]
colnames(metadf2)
metadf2[1]=="26642"
head(metadf2)
df[26642,]
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
speco <- metadf2 %>% filter(str_detect(str_trim(SourceList), "\\s+"))
View(speco)
speco <- metadf2 %>% filter(str_detect(str_trim(SpeciesBinomial), "\\s+"))
View(speco)
specletters <- letters_only(speco$SpeciesBinomial)
# Get a count of how many have non-letters
sum(specletters, na.rm = TRUE)
# Get a count of how many have non-letters
sum(letterresult, na.rm = TRUE)
which(specletters)
#define vector of strings
exeunt <- c('Unknown', 'Unidentified', 'Undetermined', 'Undetermiend')
#remove rows that contain any string in the vector in the team column
metadf2[!grepl(paste(exeunt, collapse='|'), metadf2$SpeciesBinomial),]
#remove rows that contain any string in the vector in the team column
known <- metadf2[!grepl(paste(exeunt, collapse='|'), metadf2$SpeciesBinomial),]
# Check for weird rows again
knownspeco <- letters_only(known$SpeciesBinomial)
# Get a count of how many have non-letters - 2506
sum(knownspeco, na.rm = TRUE)
# Get a count of how many have non-letters - 43
sum(specletters, na.rm = TRUE)
# Get a count of how many have non-letters - 2506
sum(knownspeco, na.rm = TRUE)
View(known)
which(knownspeco)
#remove rows that contain any string in the vector in the team column
known <- speco[!grepl(paste(exeunt, collapse='|'), speco$SpeciesBinomial),]
# Check for weird rows again
knownspeco <- letters_only(known$SpeciesBinomial)
# Get a count of how many have non-letters - 2506
sum(knownspeco, na.rm = TRUE)
which(knownspeco)
cleanq <- str_replace_all(known, "[^[:alnum:]]", " ")
cleanqc <- letters_only(cleanq$SpeciesBinomial)
cleanf <- as.data.frame(cleanq)
View(cleanf)
cleanq <- gsub("[[:punct:]]", "", known$SpeciesBinomial)
known$SpeciesBinomial <-as.character(known$SpeciesBinomial)
encodetest <- Encoding(known$SpeciesBinomial) <- 'UTF-8'
encodetestq <- letters_only(encodetest$SpeciesBinomial)
Encoding(known$SpeciesBinomial) <- 'UTF-8'
colnames(metadf) <- c('SpeciesBinomial', 'SourceList')
```{r loadin}
GBIF <- read.table('C:/Users/bydav/Desktop/GBIFNovSpeciesList.csv', sep = '\t', fill = TRUE, header = TRUE, encoding = 'UTF-8')
# need to troubleshoot the encoding. Save the current results as a temp in case I mess this up
metaupdate <- write.csv(known, "C:/Users/bydav/Desktop/UpdatedMetaSpecies.csv")
# need to troubleshoot the encoding. Save the current results as a temp in case I mess this up
capture.output(known, file = "updatedmetaspecies.csv")
head(known)
# need to troubleshoot the encoding. Save the current results as a temp in case I mess this up
capture.output(known, file = "updatedmetaspecies.txt")
listbase <- read.csv("C:/Users/bydav/Desktop/SpeciesListMeta.csv", header = TRUE, encoding = 'UTF-8)
listbase <- read.csv("C:/Users/bydav/Desktop/SpeciesListMeta.csv", header = TRUE, encoding = 'UTF-8')
View(listbase)
eukaryalist <- subset(listbase, !(Source %in% c(2,3,16)))
