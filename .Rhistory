while (s <= dim(specieslist)[1]){
# Display which species the script is on
cat("\r","scraping accessions for species", s, "of",dim(specieslist)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (specieslist$n_target[s]>0 && specieslist$n_target[s]<100) {
ids <- c(unlist(strsplit(specieslist$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (specieslist$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(specieslist$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Format and write out the sequences
write(seqs_target, file.path(path_outputs, paste(specieslist$matched_name2[s], paste0(locus, ".fasta"))))
# Read the sequences back in as fasta files
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(specieslist$matched_name2[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Fix formatting of columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with all sequences for the species, their header, accession number, etc.
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=specieslist$matched_name2[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1 # Advance counter, then reset loop variables
}
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
# Slow request
Sys.sleep(1)
}
s = 24493
while (s <= dim(specieslist)[1]){
# Display which species the script is on
cat("\r","scraping accessions for species", s, "of",dim(specieslist)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (specieslist$n_target[s]>0 && specieslist$n_target[s]<100) {
ids <- c(unlist(strsplit(specieslist$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (specieslist$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(specieslist$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Format and write out the sequences
write(seqs_target, file.path(path_outputs, paste(specieslist$matched_name2[s], paste0(locus, ".fasta"))))
# Read the sequences back in as fasta files
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(specieslist$matched_name2[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Fix formatting of columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with all sequences for the species, their header, accession number, etc.
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=specieslist$matched_name2[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1 # Advance counter, then reset loop variables
}
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
# Slow request
Sys.sleep(1)
}
s = 1
while (s <= dim(order_seqs)[1]){
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (order_seqs$n_target[s]>0 && order_seqs$n_target[s]<100) {
ids <- c(unlist(strsplit(order_seqs$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (order_seqs$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(order_seqs$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Write out the sequences
write(seqs_target, file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))))
# Read them back in as fasta
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Format columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with sequences for the species
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=order_seqs$search_name[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1
}
#reset loop variables
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
#slow down request to the Entrez server or you'll get kicked out
Sys.sleep(1)
}
order_seqs <- read.csv("C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/StepG3Output.csv)
while (s <= dim(order_seqs)[1]){
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
order_seqs <- read.csv("C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/StepG3Output.csv")
while (s <= dim(order_seqs)[1]){
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (order_seqs$n_target[s]>0 && order_seqs$n_target[s]<100) {
ids <- c(unlist(strsplit(order_seqs$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (order_seqs$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(order_seqs$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Write out the sequences
write(seqs_target, file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))))
# Read them back in as fasta
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Format columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with sequences for the species
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=order_seqs$search_name[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1
}
#reset loop variables
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
#slow down request to the Entrez server or you'll get kicked out
Sys.sleep(1)
}
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
ids <- c(unlist(strsplit(order_seqs$ids_target[s], split="\\|")))
order_seqs$ids_target[5]
class(order_seqs$ids_target)
class(specieslist$ids_target)
order_seqs$ids_target <- as.character(order_seqs$ids_target)
write.csv(a02_REFDB, file.path(path_outputs, "Incomplete_a02_REFDB.csv"), row.names=FALSE)
# Read in config
source("reflibconfig.R")
# Set entrez key
set_entrez_key(entrez_key)
specieslist <- read.csv("C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/12SRefDB_Step3Output.csv")
a02_REFDB <- read.csv("C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/Incomplete_a02_REFDB.csv")
order_seqs <- read.csv("C:/Users/bydav/Desktop/RefDB_Dev/output/2-May17-2024/StepG3Output.csv")
s = 1
while (s <= dim(order_seqs)[1]){
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (order_seqs$n_target[s]>0 && order_seqs$n_target[s]<100) {
ids <- c(unlist(strsplit(order_seqs$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (order_seqs$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(order_seqs$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Write out the sequences
write(seqs_target, file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))))
# Read them back in as fasta
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Format columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with sequences for the species
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=order_seqs$search_name[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1
}
#reset loop variables
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
#slow down request to the Entrez server or you'll get kicked out
Sys.sleep(1)
}
View(order_seqs)
olen <- unique(order_seqs$order)
order_seqs$ids_target <- as.character(order_seqs$ids_target)
while (s <= dim(order_seqs)[1]){
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (order_seqs$n_target[s]>0 && order_seqs$n_target[s]<100) {
ids <- c(unlist(strsplit(order_seqs$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (order_seqs$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(order_seqs$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Write out the sequences
write(seqs_target, file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))))
# Read them back in as fasta
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Format columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with sequences for the species
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=order_seqs$search_name[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1
}
#reset loop variables
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
#slow down request to the Entrez server or you'll get kicked out
Sys.sleep(1)
}
# Choose locus
locus = "rRNA_12S"
# Check whether the locus is a gene or other feature
is_mtgene <- locus %in% c("ATP6", "ATP8",  "COI",  "COII",  "COIII",  "CYTB",  "ND1",  "ND2",  "ND3",  "ND4", "ND4L", "ND5",  "ND6")
# Set synonyms for the target locus
target_locus_synonyms <- mtDNAterms[mtDNAterms$Locus==locus,]
# Format for ENTREZ search terms by adding OR operator and TITL label
target_locus_synonyms$Terms <- paste0("OR ", target_locus_synonyms$Name, "[TITL]")
# First term starts with "AND ("
target_locus_synonyms$Terms[1] <- paste0("AND (", target_locus_synonyms$Name[1], "[TITL]")
# Last term ends with a ")"
target_locus_synonyms$Terms[dim(target_locus_synonyms)[1]] <- paste0("OR ", target_locus_synonyms$Name[dim(target_locus_synonyms)[1]], "[TITL])")
# The full ENTREZ search term
target_searchterm <- paste(as.vector(target_locus_synonyms$Terms), collapse=" ")
while (s <= dim(order_seqs)[1]){
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (order_seqs$n_target[s]>0 && order_seqs$n_target[s]<100) {
ids <- c(unlist(strsplit(order_seqs$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (order_seqs$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(order_seqs$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Write out the sequences
write(seqs_target, file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))))
# Read them back in as fasta
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Format columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with sequences for the species
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=order_seqs$search_name[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1
}
#reset loop variables
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
#slow down request to the Entrez server or you'll get kicked out
Sys.sleep(1)
}
s = 114
while (s <= dim(order_seqs)[1]){
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (order_seqs$n_target[s]>0 && order_seqs$n_target[s]<100) {
ids <- c(unlist(strsplit(order_seqs$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (order_seqs$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(order_seqs$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Write out the sequences
write(seqs_target, file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))))
# Read them back in as fasta
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Format columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with sequences for the species
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=order_seqs$search_name[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1
}
#reset loop variables
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
#slow down request to the Entrez server or you'll get kicked out
Sys.sleep(1)
}
s = 115
while (s <= dim(order_seqs)[1]){
# Display a counter for which species it's on
cat("\r","scraping accessions for species", s, "of",dim(order_seqs)[1])
ids <- "na"
seqs_target <- "na"
# Scrape GenBank target sequences if available, but skip if >= 100 targets
if (order_seqs$n_target[s]>0 && order_seqs$n_target[s]<100) {
ids <- c(unlist(strsplit(order_seqs$ids_target[s], split="\\|")))
# If more than 200 accessions, randomly select 100
} else if  (order_seqs$n_target[s]>100) {
ids <- sample(c(unlist(strsplit(order_seqs$ids_target[s], split="\\|"))),100)
}
# If there are accessions, fetch them from GenBank
if (ids[1] !="na"){
seqs_target <- tryCatch(entrez_fetch(db="nuccore", id=ids, rettype="fasta"))
}
if(class(seqs_target) != "try-catch"){
if (seqs_target != "na"){
# Write out the sequences
write(seqs_target, file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))))
# Read them back in as fasta
fasta_target <- readDNAStringSet(file.path(path_outputs, paste(order_seqs$search_name[s], paste0(locus, ".fasta"))), format="fasta")
# Get accession numbers
seqs_target_accessions <- entrez_fetch(db="nuccore", id=ids, rettype="acc")
# Format columns
seq_header <- names(fasta_target)
sequence <- paste(fasta_target)
seq_accession <- unlist(strsplit(seqs_target_accessions, split="\n"))
# Set lengths equal so any empty spaces will fill with NAs
length(seq_header) <- length(sequence)
length(seq_accession) <- length(sequence)
# Make a temporary database with sequences for the species
tempDB <- data.frame(seq_header, sequence, seq_accession, type="accession", species=order_seqs$search_name[s])
# Append temporary database to the full database
a02_REFDB <- rbind(a02_REFDB, tempDB)
}
s=s+1
}
#reset loop variables
fasta_target<-"na"; seqs_target_accessions<-"na"; seq_header<-"na"; sequence<-"na"; seq_accession<-"na";
tempDB <-"na"
#slow down request to the Entrez server or you'll get kicked out
Sys.sleep(1)
}
write.csv(a02_REFDB, file.path(path_outputs, "Incomplete_a02_REFDB.csv"), row.names=FALSE)
troublemakers <- c(4573, 6588, 9018, 9883, 12854, 16494, 18879, 19250, 19428, 20037, 22838, 23106, 23234, 23912, 23989, 23991, 24061, 24224, 24492)
troubledf <- specieslist[grepl(paste(troublemakers, collapse='|'), specieslist$order),]
troubledf <- subset(specieslist$order == troublemakers)
troubledf <- subset(specieslist$order[troublemakers])
troubledf <- subset(specieslist, order[troublemakers])
troubledf <- specieslist[c(4573, 6588, 9018, 9883, 12854, 16494, 18879, 19250, 19428, 20037, 22838, 23106, 23234, 23912, 23989, 23991, 24061, 24224, 24492), ]
View(troubledf)
View(specieslist)
write.csv(a02_REFDB, file.path(path_outputs, "Incomplete_a02_REFDB.csv"), row.names=FALSE)
View(a02_REFDB)
a02_REFDB <- a02_REFDB[-1,] #format - remove the top row of NAs
View(a02_REFDB)
# Pick out rows where sequences weren't found
a02_REFDB_unparsed <- subset(a02_REFDB, sequence == "na")
# Remove duplicates
a02_REFDB_dedup <- a02_REFDB[!duplicated(a02_REFDB$sequence),]
z = 1
# for every row in the unique db file
for (z in  1:dim(a02_REFDB_dedup)[1]){
# find identical sequences in the full db file
dups <- subset(a02_REFDB, sequence == a02_REFDB_dedup$sequence[z])
# paste all those accessions together into a new unique db field
a02_REFDB_dedup$duplicate_accessions[z] <- paste(dups$seq_accession, collapse = "|")
a02_REFDB_dedup$duplicate_species[z] <- paste(dups[!duplicated(dups$species),"species"], collapse = "|")
z=z+1
}
row.names(a02_REFDB_dedup) <- NULL #format
#write.csv(a02_REFDB_dedup, file.path(path_outputs, "a02_REFDB_dedup"), row.names=FALSE)
View(a02_REFDB_dedup)
dedup_REFDB <- a02_REFDB_dedup
write.csv(dedup_REFDB, file.path(path_outputs, "12S_REFDB_dedup"), row.names=FALSE)
REFDB_dada <- merge(x=dedup_REFDB, y=specieslist, by.x="species", by.y="search_name", all.x=TRUE, all.y=FALSE)
View(specieslist)
REFDB_dada <- merge(x=dedup_REFDB, y=specieslist, by.x="species", by.y="matched_name2", all.x=TRUE, all.y=FALSE)
View(REFDB_dada)
REFDB_dada_merge <- merge(x=dedup_REFDB, y=specieslist, by.x="species", by.y="matched_name2", all.x=TRUE, all.y=FALSE)
View(REFDB_dada_merge)
my_cols <- c("phylum", "class","order","family","genus","species.y")
REFDB_dada <- REFDB_dada_merge[ , my_cols]
View(REFDB_dada)
REFDB_dada$header <- do.call(paste, c(REFDB_dada[my_cols], sep = ";"))
View(REFDB_dada)
REFDB_dada$header2 <- paste(">",REFDB_dada$header, sep="")
REFDB_dada <- REFDB_dada[,c("header2","sequence")]
REFDB_dada <- REFDB_dada[,c("header2","sequence.x")]
REFDB_dada <- REFDB_dada_merge[ , my_cols]
REFDB_dada$header <- do.call(paste, c(REFDB_dada[my_cols], sep = ";"))
REFDB_dada$header2 <- paste(">",REFDB_dada$header, sep="")
REFDB_dada <- REFDB_dada[,c("header2","sequence")]
REFDB_dada <- REFDB_dada[,c("header2","sequence.x")]
View(dedup_REFDB)
REFDB_dada <- REFDB_dada_merge[,c("sequence.x")]
REFDB_dada <- REFDB_dada_merge[,c("sequence")]
REFDB_dada_merge <- merge(x=dedup_REFDB, y=specieslist, by.x="species", by.y="matched_name2", all.x=TRUE, all.y=FALSE)
my_cols <- c("phylum", "class","order","family","genus","species.y")
REFDB_dada <- REFDB_dada_merge[ , my_cols]
REFDB_dada$header <- do.call(paste, c(REFDB_dada[my_cols], sep = ";"))
REFDB_dada$header2 <- paste(">",REFDB_dada$header, sep="")
REFDB_dada <- REFDB_dada[,c("header2","sequence")]
View(REFDB_dada)
a04_UNIQUEDBdada <- merge(x=dedup_REFDB, y=specieslist, by.x="species", by.y="search_name", all.x=TRUE, all.y=FALSE)
a04_UNIQUEDBdada <- merge(x=dedup_REFDB, y=specieslist, by.x="species", by.y="matched_name2", all.x=TRUE, all.y=FALSE)
my_cols <- c("phylum", "class","order","family","genus","species.y")
a04_UNIQUEDBdada$header <- do.call(paste, c(a04_UNIQUEDBdada[my_cols], sep = ";"))
a04_UNIQUEDBdada$header2 <- paste(">",a04_UNIQUEDBdada$header, sep="")
REFDB_dada <- a04_UNIQUEDBdada[,c("header2","sequence")]
View(REFDB_dada)
REFDB_dada_merge <- merge(x=dedup_REFDB, y=specieslist, by.x="species", by.y="matched_name2", all.x=TRUE, all.y=FALSE)
my_cols <- c("phylum", "class","order","family","genus","species.y")
REFDB_dada_merge$header <- do.call(paste, c(REFDB_dada_merge[my_cols], sep = ";"))
REFDB_dada_merge$header2 <- paste(">",REFDB_dada_merge$header, sep="")
REFDB_dada <- REFDB_dada_merge[,c("header2","sequence")]
write.table(REFDB_dada, file.path(output_folder, "a04_REFDBdada.fasta"), sep="\n", col.names=FALSE, row.names=FALSE, quote=FALSE)
# Save the dada-formatted reference database
write.table(REFDB_dada, file.path(path_outputs, "12S_REFDB.fasta"), sep="\n", col.names=FALSE, row.names=FALSE, quote=FALSE)
