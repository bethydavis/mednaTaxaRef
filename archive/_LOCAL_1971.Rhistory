knitr::opts_chunk$set(echo = TRUE)
full <- read.csv("C:/Users/bydav/Desktop/MaineSpeciesList_Clean.csv")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(stringr)
glimpse(full)
str_to_title(full)
scan("C:/Users/bydav/Desktop/MaineSpeciesList_Clean.csv", sep=',', what = "", quiet = TRUE)
fullv <- scan("C:/Users/bydav/Desktop/MaineSpeciesList_Clean.csv", sep=',', what = "", quiet = TRUE)
str_to_title(fullv)
str_to_sentence(fullv)
fullvs <- sub("_[^_]+$", "", fullv)
print(fullv[2471])
#replace all special characters with a space
fullvs <- sub("[^A-Za-z]+", " ", fullv)
encodetest <- scan("C:/Users/bydav/Desktop/MaineSpeciesList_Clean.csv", sep=',', what = "", quiet = TRUE, encoding = "latin1")
print(encodetest[2471])
str_to_sentence(encodetest)
encodes <- str_to_sentence(encodetest)
encodesp <- sub("_[^_]+$", "", encodes)
encodesp[2471]
encodesp <- sub("_[^_]+$", "_", encodes)
encodesp[2471]
head(encodesp)
encodes <- str_to_sentence(encodetest)
encodesp <- sub("[^A-Za-z]+", " ", encodes)
encodesp[2471]
encodesps <- sub("_[^_]+$", "", encodesp)
encodesps[2471]
encodesps <- sub(" [* ]+$", "", encodesp)
encodesps[2471]
encodesps <- sub( .+ , "", encodesp)
encodesps <- sub("" .+ "", "", encodesp)
encodesps <- sub(" .+ ", "", encodesp)
encodesps[2471]
print(encodesps)
encodesps <- gsub(" .+ ", "", encodesp)
encodetest <- scan("C:/Users/bydav/Desktop/MaineSpeciesList_Clean.csv", sep=',', what = "", quiet = TRUE, encoding = "latin1")
encodes <- str_to_sentence(encodetest)
encodesp <- sub("[^A-Za-z]+", " ", encodes)
encodesps <- gsub(" .+ ", "", encodesp)
encodesps[2471]
encodesp <- gsub("[^A-Za-z]+", " ", encodes)
encodesps <- gsub(" .+ ", "", encodesp)
encodesps[2471]
encodesps
encodeunique <- unique(encodes)
head(encodeunique)
print(encodeunique)
encodetest <- scan("C:/Users/bydav/Desktop/MaineSpeciesList_Clean.csv", sep=',', what = "", quiet = TRUE, encoding = "latin1")
encodes <- str_to_sentence(encodetest)
encodes[2471]
print(str_extract(encodes[2471], '\b?'))
print(str_extract(encodes[2471], '\\b?'))
encodesub <- sub(" .* ", "", encodes)
encodesub[2471]
encodesub <- sub("[[:space:]].*[[:space:]]", "", encodes)
encodesub[2471]
encodetable <- read.table(text = encodes, sep = " ", colClasses = "character")
cSplit(as.data.table(encodesub), "text", " ")
as.data.frame(encodetable) %>% separate(encodesub, into = paste("V", 1:6, sep = " "))
library(dplyr)
library(tidyr)
install.packages("tidyr")
library(tidyr)
as.data.frame(encodetable) %>% separate(encodesub, into = paste("V", 1:6, sep = " "))
as.data.frame(text) %>% separate(encodesub, into = paste("V", 1:6, sep = " "))
as.data.frame(text) %>% separate(encodetest, into = paste("V", 1:6, sep = " "))
full <- read.csv("C:/Users/bydav/Desktop/MaineSpeciesList_Clean.csv", encoding = "latin1")
as.data.frame(text) %>% separate(full, into = paste("V", 1:6, sep = " "))
as.data.frame(encodes) %>% separate(encodes, into = paste("V", 1:6, sep = " "))
as.data.frame(encodes) %>% separate(encodes, into = paste("V", 1:23, sep = " "))
encodetable <- as.data.frame(encodes) %>% separate(encodes, into = paste("V", 1:23, sep = " "))
View(encodetable)
print(encodetable$V3, na.exlude = TRUE)
encodetable$source_binomial <- paste(encodetable$V1, encodetable$V2, sep=" ")
encodetable$source_binomial <- paste0(encodetable$V1, encodetable$V2, sep=" ")
View(encodetable)
encodetable$source_binomial <- paste0(encodetable$V1, encodetable$V2, sep="_")
View(encodetable)
encodetable$source_binomial <- paste0(encodetable$V 1, encodetable$V 2, sep="_")
# I give up on doing regexp searches and replaces. Breaking the vector of names into a dataframe, separating by space so I can just join only the first two columns
encodetable <- as.data.frame(encodes) %>% separate(encodes, into = paste(1:23, sep = " "))
View(encodetable)
encodetable$source_binomial <- paste0(encodetable$1, encodetable$2, sep=" ")
# I give up on doing regexp searches and replaces. Breaking the vector of names into a dataframe, separating by space so I can just join only the first two columns
encodetable <- as.data.frame(encodes) %>% separate(encodes, into = paste("column", 1:23, sep = " "))
View(encodetable)
encodetable$source_binomial <- paste0(encodetable$`column 1`, encodetable$`column 2`, sep=" ")
View(encodetable)
encodetable$source_binomial <- paste0(encodetable$`column 1`, encodetable$`column 2`, sep="_")
View(encodetable)
encodetable$source_binomial <- paste0(encodetable$`column 1`, sep=" ", encodetable$`column 2`)
View(encodetable)
encodetable$source_binomial[2471]
pattern <- "/[^a-z]+/g"
pattern <- "/|:|\\?|<|>|\\|\\\\|\\*"
grepl(pattern, encodetable$source_binomial)
generalist <- encodetable$`column 1`
genera <- unique(generalist)
results <- grepl(pattern, encodetable$source_binomial)
results[1000:2000]
results[2000:3000]
results[3000:10000]
results[6000:10000]
results[9000:12000]
results[9000:1000]
results[9000:10000]
testsub <- sub(".*\bsp", "", encodetable$source_binomial[213])
testsub <- sub(".*\bsp", "", encodetable$source_binomial)
testsub[213]
testsub <- sub(".*\bsp", encodetable$source_binomial)
# do this at the end when others are done
encodeunique <- unique(encodetable$source_binomial)
encodeunique
cleanlist <- write.csv(encodeunique, "C:/Users/bydav/Desktop/CleanSpecies.csv")
check <- read.csv("C:/Users/bydav/Desktop/CleanSpeciesedit.csv", header = TRUE)
View(check)
check[2471]
check$source_binomial[2471]
library(devtools)
install_github("Maine-eDNA/abbagadabba")
cleannames <- getNCBITaxonomy(check)
library(abbagadabba)
cleannames <- getNCBITaxonomy(check)
cleannamescenturion <- getNCBITaxonomy(check[1:100])
cleannamescenturion <- getNCBITaxonomy(check$source_binomial[1:100])
if (!require("rentrez")) {install.packages("rentrez"); require("rentrez")} # Query ENTREZ databases and download accessions
set_entrez_key("c832cec80a76de1a62694193df8eb51d6608")
cleannamescenturion <- getNCBITaxonomy(check$source_binomial[1:100])
install.packages("taxize")
library("taxize")
install.packages("taxize")
namecheck <- gnr_resolve(check)
library("taxize")
e
namecheck <- gnr_resolve(check)
cleannamescenturion <- getNCBITaxonomy(check$source_binomial[1:100])
library(abbagadabba)
library(devtools)
cleannamescenturion <- getNCBITaxonomy(check$source_binomial[1:100])
if (!require("rentrez")) {install.packages("rentrez"); require("rentrez")} # Query ENTREZ databases and download accessions
set_entrez_key("c832cec80a76de1a62694193df8eb51d6608")
cleannamescenturion <- getNCBITaxonomy(check$source_binomial[1:100])
namecheck <- gnr_resolve("Absconditella lignicola")
namecheck
classification("Absconditella lignicola", db = 'ncbi')
#test out taxotools
install.packages("taxotools")
library(taxotools)
mylist <- data.frame("canonical" = c("Abrothrix longipilis",
"Mus longipilis",
"Abrothrix jelskii",
"Cardinalis cardinalis",
"Danaus plexippus"),
stringsAsFactors = FALSE)
my_taxo_list <- list_higher_taxo(mylist,"canonical")
View(my_taxo_list)
testtaxo <- list_higher_taxo(check, "source_binomial", progress = TRUE)
checkvec <- scan("C:/Users/bydav/Desktop/CleanSpeciesedit.csv", sep=',', what = "", quiet = TRUE)
cleannamescenturion <- getNCBITaxonomy(checkvec$source_binomial[1:100])
cleannamescenturion <- getNCBITaxonomy(checkvec[1:100])
MaineGenera <- write.csv(genera, "C:/Users/bydav/Desktop/MaineGenera.csv")
library(rsconnect)
## To deploy app through RStudio:
install.packages("rsconnect")
library(rsconnect)
deployApp('gapanalysis')
species <- read.csv("C:/Users/bydav/Desktop/July2023_SpeciesList.csv", header = TRUE)
which(species == "petromyzon marinus", arr.ind=TRUE)
which(species == "Petromyzon marinus", arr.ind=TRUE)
addlist <- c("petromyzon marinus", "anguilla rostrata", "micropterus salmoides")
which(species == addlist, arr.ind=TRUE)
addlist <- c("Petromyzon marinus", "Anguilla rostrata", "Micropterus salmoides")
which(species == addlist, arr.ind=TRUE)
library(stringr)
addlist <- c("petromyzon marinus", "anguilla rostrata", "micropterus salmoides")
for (i in addlist){
i = str_to_sentence(i)
which(species == i, arr.ind=TRUE)
}
library(stringr)
addlist <- c("petromyzon marinus", "anguilla rostrata", "micropterus salmoides")
for (i in addlist){
i = str_to_sentence(i)
print(which(species == i, arr.ind=TRUE))
}
species[16121]
species$source_binomial[16121]
addlist <- c("petromyzon marinus", "anguilla rostrata", "micropterus salmoides", "salvelinus fontinalis", "microgadus tomcod", "salmo salar", "alosa sapidissima", "alosa aestivalis", "morone saxatilis", "morone americana", "alosa pseudoharengus", "osmerus mordax", "sebastes fasciatus", "urophycis tenuis", "brosme brosme", "gadus morhua", "thunnus thynnus", "pollachius virens", "brevoortia tyrannus", "merluccius bilinearis", "oncorhynchus mykiss", "salmo trutta", "acipenser oxrhynchus", "acipenser brevirostrum", "fundulus heterclitus")
for (i in addlist){
i = str_to_sentence(i)
print(which(species == i, arr.ind=TRUE))
}
which(species == "fundulus heterclitus", arr.ind=TRUE
which(species == "fundulus heterclitus", arr.ind=TRUE)
print(which(species == "fundulus heterclitus", arr.ind=TRUE))
print(which(species == "acipenser oxrhynchus", arr.ind=TRUE))
